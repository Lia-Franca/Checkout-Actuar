{"ast":null,"code":"/**\n * @name creditcard.js 3.0.9\n * @license MIT\n * @author ContaAzul (contaazul.com)\n */\n(function (g, f) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? f(exports) : typeof define === 'function' && define.amd ? define(['exports'], f) : (g = typeof globalThis !== 'undefined' ? globalThis : g || self, f(g.CreditCard = {}));\n})(this, function (exports) {\n  'use strict';\n\n  var CARDS = [{\n    name: 'Banescard',\n    bins: /^(603182)[0-9]{10,12}/,\n    codeLength: 3\n  }, {\n    name: 'Maxxvan',\n    bins: /^(603182)[0-9]{10,12}/,\n    codeLength: 3\n  }, {\n    name: 'Cabal',\n    bins: /^(604324|604330|604337|604203|604338)[0-9]{10,12}/,\n    codeLength: 3\n  }, {\n    name: 'GoodCard',\n    bins: /^(606387|605680|605674|603574)[0-9]{10,12}/,\n    codeLength: 3\n  }, {\n    name: 'Elo',\n    bins: /^(401178|401179|431274|438935|451416|457393|457631|457632|504175|627780|636297|636368|(506699|5067[0-6]\\d|50677[0-8])|(50900\\d|5090[1-9]\\d|509[1-9]\\d{2})|65003[1-3]|(65003[5-9]|65004\\d|65005[0-1])|(65040[5-9]|6504[1-3]\\d)|(65048[5-9]|65049\\d|6505[0-2]\\d|65053[0-8])|(65054[1-9]|6505[5-8]\\d|65059[0-8])|(65070\\d|65071[0-8])|65072[0-7]|(65090[1-9]|65091\\d|650920)|(65165[2-9]|6516[6-7]\\d)|(65500\\d|65501\\d)|(65502[1-9]|6550[3-4]\\d|65505[0-8]))[0-9]{10,12}/,\n    codeLength: 3\n  }, {\n    name: 'Diners',\n    bins: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\n    codeLength: 3\n  }, {\n    name: 'Discover',\n    bins: /^6(?:011|5[0-9]{2}|4[4-9][0-9]{1}|(22(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[01][0-9]|92[0-5]$)[0-9]{10}$))[0-9]{12}$/,\n    codeLength: 4\n  }, {\n    name: 'Amex',\n    bins: /^3[47][0-9]{13}$/,\n    codeLength: 4\n  }, {\n    name: 'Aura',\n    bins: /^50[0-9]{14,17}$/,\n    codeLength: 3\n  }, {\n    name: 'Mastercard',\n    bins: /^(603136|603689|608619|606200|603326|605919|608783|607998|603690|604891|603600|603134|608718|603680|608710|604998)|(5[1-5][0-9]{14}|2221[0-9]{12}|222[2-9][0-9]{12}|22[3-9][0-9]{13}|2[3-6][0-9]{14}|27[01][0-9]{13}|2720[0-9]{12})$/,\n    codeLength: 3\n  }, {\n    name: 'Visa',\n    bins: /^4[0-9]{12}(?:[0-9]{3})?$/,\n    codeLength: 3\n  }, {\n    name: 'Hipercard',\n    bins: /^(38[0-9]{17}|60[0-9]{14})$/,\n    codeLength: 3\n  }, {\n    name: 'JCB',\n    bins: /^(?:2131|1800|35\\d{3})\\d{11}$/,\n    codeLength: 3\n  }];\n  var MILLENNIUM = 1000;\n  var DEFAULT_CODE_LENGTH = 3;\n\n  var getCreditCardNameByNumber = function getCreditCardNameByNumber(number) {\n    return findCreditCardObjectByNumber(number).name || 'Credit card is invalid!';\n  };\n\n  var isSecurityCodeValid = function isSecurityCodeValid(creditCardNumber, securityCode) {\n    var numberLength = getCreditCardCodeLengthByNumber(creditCardNumber);\n    return new RegExp(\"^[0-9]{\".concat(numberLength, \"}$\")).test(securityCode);\n  };\n\n  var isExpirationDateValid = function isExpirationDateValid(month, year) {\n    return isValidMonth(month) && isValidYear(year) && isFutureOrPresentDate(month, year);\n  };\n\n  var isValid = function isValid(number) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var cards = options.cards;\n    var rawNumber = removeNonNumbersCaracteres(number);\n\n    if (hasSomeInvalidDigit(number) || !hasCorrectLength(rawNumber)) {\n      return false;\n    }\n\n    var sum = sumNumber(rawNumber);\n    return checkSum(sum) && validateCardsWhenRequired(number, cards);\n  };\n\n  function validateCardsWhenRequired(number, cards) {\n    return !cards || !cards.length || validateCards(number, cards);\n  }\n\n  function validateCards(number, cards) {\n    return areCardsSupported(cards) && cards.map(function (c) {\n      return c.toLowerCase();\n    }).includes(getCreditCardNameByNumber(number).toLowerCase());\n  }\n\n  function hasCorrectLength(number) {\n    return number && number.length <= 19;\n  }\n\n  function removeNonNumbersCaracteres(number) {\n    return number.replace(/\\D/g, '');\n  }\n\n  function hasSomeInvalidDigit(creditcardNumber) {\n    var invalidDigits = new RegExp('[^0-9- ]');\n    return invalidDigits.test(creditcardNumber);\n  }\n\n  function checkSum(sum) {\n    return sum > 0 && sum % 10 === 0;\n  }\n\n  function areCardsSupported(passedCards) {\n    var supportedCards = CARDS.map(function (c) {\n      return c.name.toLowerCase();\n    });\n    return passedCards.every(function (c) {\n      return supportedCards.includes(c.toLowerCase());\n    });\n  }\n\n  function findCreditCardObjectByNumber(number) {\n    if (!number) return {};\n    var numberOnly = number.replace(/[^\\d]/g, '');\n    return CARDS.find(function (card) {\n      return card.bins.test(numberOnly) && card;\n    }) || {};\n  }\n\n  function getCreditCardCodeLengthByNumber(number) {\n    return findCreditCardObjectByNumber(number).codeLength || DEFAULT_CODE_LENGTH;\n  }\n\n  function isValidMonth(month) {\n    return !isNaN(month) && month >= 1 && month <= 12;\n  }\n\n  function isValidYear(year) {\n    return !isNaN(year) && isValidFullYear(formatFullYear(year));\n  }\n\n  function formatFullYear(year) {\n    if (year.length === 2) return dateRange(year);\n    return year.length === 4 ? year : 0;\n  }\n\n  function dateRange() {\n    var increaseYear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var year = parseInt(increaseYear);\n    var today = new Date();\n    return Math.floor(today.getFullYear() / MILLENNIUM) * MILLENNIUM + year;\n  }\n\n  function isValidFullYear(year) {\n    return year >= dateRange() && year <= dateRange(MILLENNIUM);\n  }\n\n  function isFutureOrPresentDate(month, year) {\n    var fullYear = formatFullYear(year);\n    var currentDate = new Date();\n    var expirationDate = new Date();\n    currentDate.setFullYear(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    expirationDate.setFullYear(fullYear, month - 1, 1);\n    return currentDate <= expirationDate;\n  }\n\n  function sumNumber(number) {\n    var computed = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];\n    var sum = 0;\n    var digit = 0;\n    var i = number.length;\n    var even = true;\n\n    while (i--) {\n      digit = Number(number[i]);\n      sum += (even = !even) ? computed[digit] : digit;\n    }\n\n    return sum;\n  }\n\n  exports.getCreditCardNameByNumber = getCreditCardNameByNumber;\n  exports.isExpirationDateValid = isExpirationDateValid;\n  exports.isSecurityCodeValid = isSecurityCodeValid;\n  exports.isValid = isValid;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}
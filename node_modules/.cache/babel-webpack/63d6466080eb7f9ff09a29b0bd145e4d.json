{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/Acdev/Documents/pagina-checkout/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.responseInterceptor = void 0;\n\nconst zlib = require(\"zlib\");\n/**\n * Intercept responses from upstream.\n * Automatically decompress (deflate, gzip, brotli).\n * Give developer the opportunity to modify intercepted Buffer and http.ServerResponse\n *\n * NOTE: must set options.selfHandleResponse=true (prevent automatic call of res.end())\n */\n\n\nfunction responseInterceptor(interceptor) {\n  return /*#__PURE__*/function () {\n    var _proxyRes2 = _asyncToGenerator(function* (proxyRes, req, res) {\n      const originalProxyRes = proxyRes;\n      let buffer = Buffer.from('', 'utf8'); // decompress proxy response\n\n      const _proxyRes = decompress(proxyRes, proxyRes.headers['content-encoding']); // concat data stream\n\n\n      _proxyRes.on('data', chunk => buffer = Buffer.concat([buffer, chunk]));\n\n      _proxyRes.on('end', /*#__PURE__*/_asyncToGenerator(function* () {\n        // copy original headers\n        copyHeaders(proxyRes, res); // call interceptor with intercepted response (buffer)\n\n        const interceptedBuffer = Buffer.from(yield interceptor(buffer, originalProxyRes, req, res)); // set correct content-length (with double byte character support)\n\n        res.setHeader('content-length', Buffer.byteLength(interceptedBuffer, 'utf8'));\n        res.write(interceptedBuffer);\n        res.end();\n      }));\n\n      _proxyRes.on('error', error => {\n        res.end(`Error fetching proxied request: ${error.message}`);\n      });\n    });\n\n    function proxyRes(_x, _x2, _x3) {\n      return _proxyRes2.apply(this, arguments);\n    }\n\n    return proxyRes;\n  }();\n}\n\nexports.responseInterceptor = responseInterceptor;\n/**\n * Streaming decompression of proxy response\n * source: https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L116\n */\n\nfunction decompress(proxyRes, contentEncoding) {\n  let _proxyRes = proxyRes;\n  let decompress;\n\n  switch (contentEncoding) {\n    case 'gzip':\n      decompress = zlib.createGunzip();\n      break;\n\n    case 'br':\n      decompress = zlib.createBrotliDecompress();\n      break;\n\n    case 'deflate':\n      decompress = zlib.createInflate();\n      break;\n\n    default:\n      break;\n  }\n\n  if (decompress) {\n    _proxyRes.pipe(decompress);\n\n    _proxyRes = decompress;\n  }\n\n  return _proxyRes;\n}\n/**\n * Copy original headers\n * https://github.com/apache/superset/blob/9773aba522e957ed9423045ca153219638a85d2f/superset-frontend/webpack.proxy-config.js#L78\n */\n\n\nfunction copyHeaders(originalResponse, response) {\n  response.statusCode = originalResponse.statusCode;\n  response.statusMessage = originalResponse.statusMessage;\n\n  if (response.setHeader) {\n    let keys = Object.keys(originalResponse.headers); // ignore chunked, brotli, gzip, deflate headers\n\n    keys = keys.filter(key => !['content-encoding', 'transfer-encoding'].includes(key));\n    keys.forEach(key => {\n      let value = originalResponse.headers[key];\n\n      if (key === 'set-cookie') {\n        // remove cookie domain\n        value = Array.isArray(value) ? value : [value];\n        value = value.map(x => x.replace(/Domain=[^;]+?/i, ''));\n      }\n\n      response.setHeader(key, value);\n    });\n  } else {\n    response.headers = originalResponse.headers;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}